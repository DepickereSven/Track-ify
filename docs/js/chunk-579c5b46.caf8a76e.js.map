{"version":3,"sources":["webpack:///./src/assets/js/spotify.js","webpack:///./node_modules/vuetify/lib/util/mergeData.js","webpack:///./node_modules/vuetify/lib/components/VGrid/VContainer.js","webpack:///./node_modules/vuetify/lib/components/VGrid/VLayout.js","webpack:///./node_modules/spotify-web-api-js/src/spotify-web-api.js","webpack:///./node_modules/vuetify/lib/components/VGrid/grid.js"],"names":["SpotifyWebApi","require","configuration","authEndpoint","clientId","redirectUri","scopes","spotifyApi","getHash","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","setUpSpotifyAPI","_self","setAccessToken","$store","state","login","token","mergeData","prop","event","mergeTarget","i","arguments","length","Object","keys","Array","isArray","concat","undefined","trim","listeners","Grid","extend","name","functional","props","id","String","tag","type","default","fluid","Boolean","render","h","classes","data","children","attrs","filter","key","value","startsWith","domProps","staticClass","class","_baseUri","_accessToken","_promiseImplementation","WrapPromiseWithAbort","promise","onAbort","abort","_promiseProvider","promiseFunction","returnedPromise","deferred","defer","resolvedResult","resolve","rejectedResult","reject","Promise","_extend","args","prototype","slice","call","target","objects","forEach","object","j","hasOwnProperty","_buildUrl","url","parameters","qs","encodeURIComponent","_performRequest","requestData","callback","req","XMLHttpRequest","success","failure","open","params","setRequestHeader","contentType","onreadystatechange","readyState","responseText","JSON","parse","e","console","error","status","send","postData","stringify","_checkParamsAndPerformRequest","options","optionsAlwaysExtendParams","opt","cb","Constr","constructor","getGeneric","getMe","getMySavedTracks","addToMySavedTracks","trackIds","removeFromMySavedTracks","containsMySavedTracks","ids","join","getMySavedAlbums","addToMySavedAlbums","albumIds","removeFromMySavedAlbums","containsMySavedAlbums","getMyTopArtists","getMyTopTracks","getMyRecentlyPlayedTracks","followUsers","userIds","followArtists","artistIds","followPlaylist","playlistId","unfollowUsers","unfollowArtists","unfollowPlaylist","isFollowingUsers","isFollowingArtists","areFollowingPlaylist","getFollowedArtists","getUser","userId","getUserPlaylists","getPlaylist","getPlaylistTracks","createPlaylist","changePlaylistDetails","addTracksToPlaylist","uris","replaceTracksInPlaylist","reorderTracksInPlaylist","rangeStart","insertBefore","range_start","insert_before","removeTracksFromPlaylist","dataToBeSent","map","uri","tracks","removeTracksFromPlaylistWithSnapshotId","snapshotId","snapshot_id","removeTracksFromPlaylistInPositions","positions","uploadCustomPlaylistCoverImage","imageData","replace","getAlbum","albumId","getAlbumTracks","getAlbums","getTrack","trackId","getTracks","getArtist","artistId","getArtists","getArtistAlbums","getArtistTopTracks","countryId","country","getArtistRelatedArtists","getFeaturedPlaylists","getNewReleases","getCategories","getCategory","categoryId","getCategoryPlaylists","search","query","types","q","searchAlbums","this","searchArtists","searchTracks","searchPlaylists","getAudioFeaturesForTrack","getAudioFeaturesForTracks","getAudioAnalysisForTrack","getRecommendations","getAvailableGenreSeeds","getMyDevices","getMyCurrentPlaybackState","getMyCurrentPlayingTrack","transferMyPlayback","deviceIds","device_ids","play","device_id","field","newOptions","pause","skipToNext","skipToPrevious","seek","position_ms","setRepeat","setVolume","volume_percent","setShuffle","getAccessToken","accessToken","setPromiseImplementation","PromiseImplementation","valid","p","then","catch","Error","module","exports","VGrid","Vue"],"mappings":"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","file":"js/chunk-579c5b46.caf8a76e.js","sourcesContent":["/**\r\n Created by svend on 30/10/2019.\r\n **/\r\n\r\nconst SpotifyWebApi = require('spotify-web-api-js');\r\n\r\nexport default (function () {\r\n\r\n    const configuration = {\r\n        authEndpoint: \"https://accounts.spotify.com/authorize\",\r\n        clientId: \"a99753b000db451b9a40b2420e8cdfcb\",\r\n        redirectUri: \"http://localhost:8081/confirm\",\r\n        scopes: [\r\n            \"user-top-read\",\r\n            // \"user-read-email\",\r\n            // \"user-read-private\"\r\n        ],\r\n        spotifyApi: null\r\n    };\r\n\r\n    //******  HELPER FUNCTION ******//\r\n\r\n    function getHash() {\r\n        const hash = window.location.hash\r\n            .substring(1)\r\n            .split('&')\r\n            .reduce(function (initial, item) {\r\n                if (item) {\r\n                    var parts = item.split('=');\r\n                    initial[parts[0]] = decodeURIComponent(parts[1]);\r\n                }\r\n                return initial;\r\n            }, {});\r\n        window.location.hash = '';\r\n        return hash;\r\n    }\r\n\r\n    function setUpSpotifyAPI(_self) {\r\n        configuration.spotifyApi = new SpotifyWebApi();\r\n        configuration.spotifyApi.setAccessToken(_self.$store.state.login.token);\r\n    }\r\n\r\n\r\n    return {\r\n        configuration,\r\n        getHash,\r\n        setUpSpotifyAPI\r\n    }\r\n\r\n})();\r\n","/**\n * @copyright 2017 Alex Regan\n * @license MIT\n * @see https://github.com/alexsasharegan/vue-functional-data-merge\n */\nexport default function mergeData() {\n  const mergeTarget = {};\n  let i = arguments.length;\n  let prop;\n  let event; // Allow for variadic argument length.\n\n  while (i--) {\n    // Iterate through the data properties and execute merge strategies\n    // Object.keys eliminates need for hasOwnProperty call\n    for (prop of Object.keys(arguments[i])) {\n      switch (prop) {\n        // Array merge strategy (array concatenation)\n        case 'class':\n        case 'style':\n        case 'directives':\n          if (!Array.isArray(mergeTarget[prop])) {\n            mergeTarget[prop] = [];\n          } // Repackaging in an array allows Vue runtime\n          // to merge class/style bindings regardless of type.\n\n\n          mergeTarget[prop] = mergeTarget[prop].concat(arguments[i][prop]);\n          break;\n        // Space delimited string concatenation strategy\n\n        case 'staticClass':\n          if (!arguments[i][prop]) {\n            break;\n          }\n\n          if (mergeTarget[prop] === undefined) {\n            mergeTarget[prop] = '';\n          }\n\n          if (mergeTarget[prop]) {\n            // Not an empty string, so concatenate\n            mergeTarget[prop] += ' ';\n          }\n\n          mergeTarget[prop] += arguments[i][prop].trim();\n          break;\n        // Object, the properties of which to merge via array merge strategy (array concatenation).\n        // Callback merge strategy merges callbacks to the beginning of the array,\n        // so that the last defined callback will be invoked first.\n        // This is done since to mimic how Object.assign merging\n        // uses the last given value to assign.\n\n        case 'on':\n        case 'nativeOn':\n          if (!mergeTarget[prop]) {\n            mergeTarget[prop] = {};\n          }\n\n          const listeners = mergeTarget[prop];\n\n          for (event of Object.keys(arguments[i][prop] || {})) {\n            // Concat function to array of functions if callback present.\n            if (listeners[event]) {\n              // Insert current iteration data in beginning of merged array.\n              listeners[event] = Array().concat( // eslint-disable-line\n              listeners[event], arguments[i][prop][event]);\n            } else {\n              // Straight assign.\n              listeners[event] = arguments[i][prop][event];\n            }\n          }\n\n          break;\n        // Object merge strategy\n\n        case 'attrs':\n        case 'props':\n        case 'domProps':\n        case 'scopedSlots':\n        case 'staticStyle':\n        case 'hook':\n        case 'transition':\n          if (!mergeTarget[prop]) {\n            mergeTarget[prop] = {};\n          }\n\n          mergeTarget[prop] = { ...arguments[i][prop],\n            ...mergeTarget[prop]\n          };\n          break;\n        // Reassignment strategy (no merge)\n\n        case 'slot':\n        case 'key':\n        case 'ref':\n        case 'tag':\n        case 'show':\n        case 'keepAlive':\n        default:\n          if (!mergeTarget[prop]) {\n            mergeTarget[prop] = arguments[i][prop];\n          }\n\n      }\n    }\n  }\n\n  return mergeTarget;\n}\n//# sourceMappingURL=mergeData.js.map","import \"../../../src/components/VGrid/_grid.sass\";\nimport \"../../../src/components/VGrid/VGrid.sass\";\nimport Grid from './grid';\nimport mergeData from '../../util/mergeData';\n/* @vue/component */\n\nexport default Grid('container').extend({\n  name: 'v-container',\n  functional: true,\n  props: {\n    id: String,\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    fluid: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  render(h, {\n    props,\n    data,\n    children\n  }) {\n    let classes;\n    const {\n      attrs\n    } = data;\n\n    if (attrs) {\n      // reset attrs to extract utility clases like pa-3\n      data.attrs = {};\n      classes = Object.keys(attrs).filter(key => {\n        // TODO: Remove once resolved\n        // https://github.com/vuejs/vue/issues/7841\n        if (key === 'slot') return false;\n        const value = attrs[key]; // add back data attributes like data-test=\"foo\" but do not\n        // add them as classes\n\n        if (key.startsWith('data-')) {\n          data.attrs[key] = value;\n          return false;\n        }\n\n        return value || typeof value === 'string';\n      });\n    }\n\n    if (props.id) {\n      data.domProps = data.domProps || {};\n      data.domProps.id = props.id;\n    }\n\n    return h(props.tag, mergeData(data, {\n      staticClass: 'container',\n      class: Array({\n        'container--fluid': props.fluid\n      }).concat(classes || [])\n    }), children);\n  }\n\n});\n//# sourceMappingURL=VContainer.js.map","import \"../../../src/components/VGrid/_grid.sass\";\nimport Grid from './grid';\nexport default Grid('layout');\n//# sourceMappingURL=VLayout.js.map","/* global module */\n'use strict';\n\n/**\n * Class representing the API\n */\nvar SpotifyWebApi = (function() {\n  var _baseUri = 'https://api.spotify.com/v1';\n  var _accessToken = null;\n  var _promiseImplementation = null;\n\n  var WrapPromiseWithAbort = function(promise, onAbort) {\n    promise.abort = onAbort;\n    return promise;\n  };\n\n  var _promiseProvider = function(promiseFunction, onAbort) {\n    var returnedPromise;\n    if (_promiseImplementation !== null) {\n      var deferred = _promiseImplementation.defer();\n      promiseFunction(\n        function(resolvedResult) {\n          deferred.resolve(resolvedResult);\n        },\n        function(rejectedResult) {\n          deferred.reject(rejectedResult);\n        }\n      );\n      returnedPromise = deferred.promise;\n    } else {\n      if (window.Promise) {\n        returnedPromise = new window.Promise(promiseFunction);\n      }\n    }\n\n    if (returnedPromise) {\n      return new WrapPromiseWithAbort(returnedPromise, onAbort);\n    } else {\n      return null;\n    }\n  };\n\n  var _extend = function() {\n    var args = Array.prototype.slice.call(arguments);\n    var target = args[0];\n    var objects = args.slice(1);\n    target = target || {};\n    objects.forEach(function(object) {\n      for (var j in object) {\n        if (object.hasOwnProperty(j)) {\n          target[j] = object[j];\n        }\n      }\n    });\n    return target;\n  };\n\n  var _buildUrl = function(url, parameters) {\n    var qs = '';\n    for (var key in parameters) {\n      if (parameters.hasOwnProperty(key)) {\n        var value = parameters[key];\n        qs += encodeURIComponent(key) + '=' + encodeURIComponent(value) + '&';\n      }\n    }\n    if (qs.length > 0) {\n      // chop off last '&'\n      qs = qs.substring(0, qs.length - 1);\n      url = url + '?' + qs;\n    }\n    return url;\n  };\n\n  var _performRequest = function(requestData, callback) {\n    var req = new XMLHttpRequest();\n\n    var promiseFunction = function(resolve, reject) {\n      function success(data) {\n        if (resolve) {\n          resolve(data);\n        }\n        if (callback) {\n          callback(null, data);\n        }\n      }\n\n      function failure() {\n        if (reject) {\n          reject(req);\n        }\n        if (callback) {\n          callback(req, null);\n        }\n      }\n\n      var type = requestData.type || 'GET';\n      req.open(type, _buildUrl(requestData.url, requestData.params));\n      if (_accessToken) {\n        req.setRequestHeader('Authorization', 'Bearer ' + _accessToken);\n      }\n      if (requestData.contentType) {\n        req.setRequestHeader('Content-Type', requestData.contentType)\n      }\n\n      req.onreadystatechange = function() {\n        if (req.readyState === 4) {\n          var data = null;\n          try {\n            data = req.responseText ? JSON.parse(req.responseText) : '';\n          } catch (e) {\n            console.error(e);\n          }\n\n          if (req.status >= 200 && req.status < 300) {\n            success(data);\n          } else {\n            failure();\n          }\n        }\n      };\n\n      if (type === 'GET') {\n        req.send(null);\n      } else {\n        var postData = null\n        if (requestData.postData) {\n          postData = requestData.contentType === 'image/jpeg' ? requestData.postData : JSON.stringify(requestData.postData)\n        }\n        req.send(postData);\n      }\n    };\n\n    if (callback) {\n      promiseFunction();\n      return null;\n    } else {\n      return _promiseProvider(promiseFunction, function() {\n        req.abort();\n      });\n    }\n  };\n\n  var _checkParamsAndPerformRequest = function(requestData, options, callback, optionsAlwaysExtendParams) {\n    var opt = {};\n    var cb = null;\n\n    if (typeof options === 'object') {\n      opt = options;\n      cb = callback;\n    } else if (typeof options === 'function') {\n      cb = options;\n    }\n\n    // options extend postData, if any. Otherwise they extend parameters sent in the url\n    var type = requestData.type || 'GET';\n    if (type !== 'GET' && requestData.postData && !optionsAlwaysExtendParams) {\n      requestData.postData = _extend(requestData.postData, opt);\n    } else {\n      requestData.params = _extend(requestData.params, opt);\n    }\n    return _performRequest(requestData, cb);\n  };\n\n  /**\n   * Creates an instance of the wrapper\n   * @constructor\n   */\n  var Constr = function() {};\n\n  Constr.prototype = {\n    constructor: SpotifyWebApi\n  };\n\n  /**\n   * Fetches a resource through a generic GET request.\n   *\n   * @param {string} url The URL to be fetched\n   * @param {function(Object,Object)} callback An optional callback\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getGeneric = function(url, callback) {\n    var requestData = {\n      url: url\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Fetches information about the current user.\n   * See [Get Current User's Profile](https://developer.spotify.com/web-api/get-current-users-profile/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMe = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches current user's saved tracks.\n   * See [Get Current User's Saved Tracks](https://developer.spotify.com/web-api/get-users-saved-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMySavedTracks = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Adds a list of tracks to the current user's saved tracks.\n   * See [Save Tracks for Current User](https://developer.spotify.com/web-api/save-tracks-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addToMySavedTracks = function(trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks',\n      type: 'PUT',\n      postData: trackIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Remove a list of tracks from the current user's saved tracks.\n   * See [Remove Tracks for Current User](https://developer.spotify.com/web-api/remove-tracks-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeFromMySavedTracks = function(trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks',\n      type: 'DELETE',\n      postData: trackIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Checks if the current user's saved tracks contains a certain list of tracks.\n   * See [Check Current User's Saved Tracks](https://developer.spotify.com/web-api/check-users-saved-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.containsMySavedTracks = function(trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks/contains',\n      params: { ids: trackIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a list of the albums saved in the current Spotify user's \"Your Music\" library.\n   * See [Get Current User's Saved Albums](https://developer.spotify.com/web-api/get-users-saved-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMySavedAlbums = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Save one or more albums to the current user's \"Your Music\" library.\n   * See [Save Albums for Current User](https://developer.spotify.com/web-api/save-albums-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addToMySavedAlbums = function(albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums',\n      type: 'PUT',\n      postData: albumIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Remove one or more albums from the current user's \"Your Music\" library.\n   * See [Remove Albums for Current User](https://developer.spotify.com/web-api/remove-albums-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeFromMySavedAlbums = function(albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums',\n      type: 'DELETE',\n      postData: albumIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Check if one or more albums is already saved in the current Spotify user's \"Your Music\" library.\n   * See [Check User's Saved Albums](https://developer.spotify.com/web-api/check-users-saved-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.containsMySavedAlbums = function(albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums/contains',\n      params: { ids: albumIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get the current user’s top artists based on calculated affinity.\n   * See [Get a User’s Top Artists](https://developer.spotify.com/web-api/get-users-top-artists-and-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyTopArtists = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/top/artists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get the current user’s top tracks based on calculated affinity.\n   * See [Get a User’s Top Tracks](https://developer.spotify.com/web-api/get-users-top-artists-and-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyTopTracks = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/top/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get tracks from the current user’s recently played tracks.\n   * See [Get Current User’s Recently Played Tracks](https://developer.spotify.com/web-api/web-api-personalization-endpoints/get-recently-played/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyRecentlyPlayedTracks = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/recently-played'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Adds the current user as a follower of one or more other Spotify users.\n   * See [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.followUsers = function(userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'PUT',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Adds the current user as a follower of one or more artists.\n   * See [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.followArtists = function(artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'PUT',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Add the current user as a follower of one playlist.\n   * See [Follow a Playlist](https://developer.spotify.com/web-api/follow-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed. For instance,\n   * whether you want the playlist to be followed privately ({public: false})\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.followPlaylist = function(playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/followers',\n      type: 'PUT',\n      postData: {}\n    };\n\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Removes the current user as a follower of one or more other Spotify users.\n   * See [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.unfollowUsers = function(userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'DELETE',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Removes the current user as a follower of one or more artists.\n   * See [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.unfollowArtists = function(artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'DELETE',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Remove the current user as a follower of one playlist.\n   * See [Unfollow a Playlist](https://developer.spotify.com/web-api/unfollow-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.unfollowPlaylist = function(playlistId, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/followers',\n      type: 'DELETE'\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Checks to see if the current user is following one or more other Spotify users.\n   * See [Check if Current User Follows Users or Artists](https://developer.spotify.com/web-api/check-current-user-follows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the user is following the users sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.isFollowingUsers = function(userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/contains',\n      type: 'GET',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Checks to see if the current user is following one or more artists.\n   * See [Check if Current User Follows](https://developer.spotify.com/web-api/check-current-user-follows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the user is following the artists sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.isFollowingArtists = function(artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/contains',\n      type: 'GET',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Check to see if one or more Spotify users are following a specified playlist.\n   * See [Check if Users Follow a Playlist](https://developer.spotify.com/web-api/check-user-following-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the users are following the playlist sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.areFollowingPlaylist = function(playlistId, userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/followers/contains',\n      type: 'GET',\n      params: {\n        ids: userIds.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Get the current user's followed artists.\n   * See [Get User's Followed Artists](https://developer.spotify.com/web-api/get-followed-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} [options] Options, being after and limit.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an object with a paged object containing\n   * artists.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\n   * artists objects. Not returned if a callback is given.\n   */\n  Constr.prototype.getFollowedArtists = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following',\n      type: 'GET',\n      params: {\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches information about a specific user.\n   * See [Get a User's Profile](https://developer.spotify.com/web-api/get-users-profile/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getUser = function(userId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId)\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of the current user's playlists.\n   * See [Get a List of a User's Playlists](https://developer.spotify.com/web-api/get-list-users-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId An optional id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>). If not provided, the id of the user that granted\n   * the permissions will be used.\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getUserPlaylists = function(userId, options, callback) {\n    var requestData;\n    if (typeof userId === 'string') {\n      requestData = {\n        url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists'\n      };\n    } else {\n      requestData = {\n        url: _baseUri + '/me/playlists'\n      };\n      callback = options;\n      options = userId;\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a specific playlist.\n   * See [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getPlaylist = function(playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches the tracks from a specific playlist.\n   * See [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getPlaylistTracks = function(playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Creates a playlist and stores it in the current user's library.\n   * See [Create a Playlist](https://developer.spotify.com/web-api/create-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.createPlaylist = function(userId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists',\n      type: 'POST',\n      postData: options\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Change a playlist's name and public/private state\n   * See [Change a Playlist's Details](https://developer.spotify.com/web-api/change-playlist-details/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} data A JSON object with the data to update. E.g. {name: 'A new name', public: true}\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.changePlaylistDetails = function(playlistId, data, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId,\n      type: 'PUT',\n      postData: data\n    };\n    return _checkParamsAndPerformRequest(requestData, data, callback);\n  };\n\n  /**\n   * Add tracks to a playlist.\n   * See [Add Tracks to a Playlist](https://developer.spotify.com/web-api/add-tracks-to-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} uris An array of Spotify URIs for the tracks\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addTracksToPlaylist = function(playlistId, uris, options, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'POST',\n      postData: {\n        uris: uris\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback, true);\n  };\n\n  /**\n   * Replace the tracks of a playlist\n   * See [Replace a Playlist's Tracks](https://developer.spotify.com/web-api/replace-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} uris An array of Spotify URIs for the tracks\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.replaceTracksInPlaylist = function(playlistId, uris, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'PUT',\n      postData: { uris: uris }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Reorder tracks in a playlist\n   * See [Reorder a Playlist’s Tracks](https://developer.spotify.com/web-api/reorder-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {number} rangeStart The position of the first track to be reordered.\n   * @param {number} insertBefore The position where the tracks should be inserted. To reorder the tracks to\n   * the end of the playlist, simply set insert_before to the position after the last track.\n   * @param {Object} options An object with optional parameters (range_length, snapshot_id)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.reorderTracksInPlaylist = function(playlistId, rangeStart, insertBefore, options, callback) {\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'PUT',\n      postData: {\n        range_start: rangeStart,\n        insert_before: insertBefore\n      }\n    };\n    /* eslint-enable camelcase */\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Remove tracks from a playlist\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<Object>} uris An array of tracks to be removed. Each element of the array can be either a\n   * string, in which case it is treated as a URI, or an object containing the properties `uri` (which is a\n   * string) and `positions` (which is an array of integers).\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeTracksFromPlaylist = function(playlistId, uris, callback) {\n    var dataToBeSent = uris.map(function(uri) {\n      if (typeof uri === 'string') {\n        return { uri: uri };\n      } else {\n        return uri;\n      }\n    });\n\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: { tracks: dataToBeSent }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Remove tracks from a playlist, specifying a snapshot id.\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<Object>} uris An array of tracks to be removed. Each element of the array can be either a\n   * string, in which case it is treated as a URI, or an object containing the properties `uri` (which is a\n   * string) and `positions` (which is an array of integers).\n   * @param {string} snapshotId The playlist's snapshot ID against which you want to make the changes\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeTracksFromPlaylistWithSnapshotId = function(playlistId, uris, snapshotId, callback) {\n    var dataToBeSent = uris.map(function(uri) {\n      if (typeof uri === 'string') {\n        return { uri: uri };\n      } else {\n        return uri;\n      }\n    });\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: {\n        tracks: dataToBeSent,\n        snapshot_id: snapshotId\n      }\n    };\n    /* eslint-enable camelcase */\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Remove tracks from a playlist, specifying the positions of the tracks to be removed.\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<number>} positions array of integers containing the positions of the tracks to remove\n   * from the playlist.\n   * @param {string} snapshotId The playlist's snapshot ID against which you want to make the changes\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeTracksFromPlaylistInPositions = function(playlistId, positions, snapshotId, callback) {\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: {\n        positions: positions,\n        snapshot_id: snapshotId\n      }\n    };\n    /* eslint-enable camelcase */\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Upload a custom playlist cover image.\n   * See [Upload A Custom Playlist Cover Image](https://developer.spotify.com/web-api/upload-a-custom-playlist-cover-image/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {string} imageData Base64 encoded JPEG image data, maximum payload size is 256 KB.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.uploadCustomPlaylistCoverImage = function(playlistId, imageData, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/images',\n      type: 'PUT',\n      postData: imageData.replace(/^data:image\\/jpeg;base64,/, ''),\n      contentType: 'image/jpeg'\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Fetches an album from the Spotify catalog.\n   * See [Get an Album](https://developer.spotify.com/web-api/get-album/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} albumId The id of the album. If you know the Spotify URI it is easy\n   * to find the album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAlbum = function(albumId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/' + albumId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches the tracks of an album from the Spotify catalog.\n   * See [Get an Album's Tracks](https://developer.spotify.com/web-api/get-albums-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} albumId The id of the album. If you know the Spotify URI it is easy\n   * to find the album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAlbumTracks = function(albumId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/' + albumId + '/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple albums from the Spotify catalog.\n   * See [Get Several Albums](https://developer.spotify.com/web-api/get-several-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAlbums = function(albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/',\n      params: { ids: albumIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a track from the Spotify catalog.\n   * See [Get a Track](https://developer.spotify.com/web-api/get-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getTrack = function(trackId, options, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/tracks/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple tracks from the Spotify catalog.\n   * See [Get Several Tracks](https://developer.spotify.com/web-api/get-several-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getTracks = function(trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/tracks/',\n      params: { ids: trackIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches an artist from the Spotify catalog.\n   * See [Get an Artist](https://developer.spotify.com/web-api/get-artist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtist = function(artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple artists from the Spotify catalog.\n   * See [Get Several Artists](https://developer.spotify.com/web-api/get-several-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtists = function(artistIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/',\n      params: { ids: artistIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches the albums of an artist from the Spotify catalog.\n   * See [Get an Artist's Albums](https://developer.spotify.com/web-api/get-artists-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtistAlbums = function(artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/albums'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of top tracks of an artist from the Spotify catalog, for a specific country.\n   * See [Get an Artist's Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {string} countryId The id of the country (e.g. ES for Spain or US for United States)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtistTopTracks = function(artistId, countryId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/top-tracks',\n      params: { country: countryId }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of artists related with a given one from the Spotify catalog.\n   * See [Get an Artist's Related Artists](https://developer.spotify.com/web-api/get-related-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtistRelatedArtists = function(artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/related-artists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of Spotify featured playlists (shown, for example, on a Spotify player's \"Browse\" tab).\n   * See [Get a List of Featured Playlists](https://developer.spotify.com/web-api/get-list-featured-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getFeaturedPlaylists = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/featured-playlists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of new album releases featured in Spotify (shown, for example, on a Spotify player's \"Browse\" tab).\n   * See [Get a List of New Releases](https://developer.spotify.com/web-api/get-list-new-releases/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getNewReleases = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/new-releases'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a list of categories used to tag items in Spotify (on, for example, the Spotify player's \"Browse\" tab).\n   * See [Get a List of Categories](https://developer.spotify.com/web-api/get-list-categories/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getCategories = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/categories'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a single category used to tag items in Spotify (on, for example, the Spotify player's \"Browse\" tab).\n   * See [Get a Category](https://developer.spotify.com/web-api/get-category/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} categoryId The id of the category. These can be found with the getCategories function\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getCategory = function(categoryId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/categories/' + categoryId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a list of Spotify playlists tagged with a particular category.\n   * See [Get a Category's Playlists](https://developer.spotify.com/web-api/get-categorys-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} categoryId The id of the category. These can be found with the getCategories function\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getCategoryPlaylists = function(categoryId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/categories/' + categoryId + '/playlists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get Spotify catalog information about artists, albums, tracks or playlists that match a keyword string.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Array<string>} types An array of item types to search across.\n   * Valid types are: 'album', 'artist', 'playlist', and 'track'.\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.search = function(query, types, options, callback) {\n    var requestData = {\n      url: _baseUri + '/search/',\n      params: {\n        q: query,\n        type: types.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches albums from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchAlbums = function(query, options, callback) {\n    return this.search(query, ['album'], options, callback);\n  };\n\n  /**\n   * Fetches artists from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchArtists = function(query, options, callback) {\n    return this.search(query, ['artist'], options, callback);\n  };\n\n  /**\n   * Fetches tracks from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchTracks = function(query, options, callback) {\n    return this.search(query, ['track'], options, callback);\n  };\n\n  /**\n   * Fetches playlists from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchPlaylists = function(query, options, callback) {\n    return this.search(query, ['playlist'], options, callback);\n  };\n\n  /**\n   * Get audio features for a single track identified by its unique Spotify ID.\n   * See [Get Audio Features for a Track](https://developer.spotify.com/web-api/get-audio-features/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAudioFeaturesForTrack = function(trackId, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/audio-features/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get audio features for multiple tracks based on their Spotify IDs.\n   * See [Get Audio Features for Several Tracks](https://developer.spotify.com/web-api/get-several-audio-features/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAudioFeaturesForTracks = function(trackIds, callback) {\n    var requestData = {\n      url: _baseUri + '/audio-features',\n      params: { ids: trackIds }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get audio analysis for a single track identified by its unique Spotify ID.\n   * See [Get Audio Analysis for a Track](https://developer.spotify.com/web-api/get-audio-analysis/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAudioAnalysisForTrack = function(trackId, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/audio-analysis/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Create a playlist-style listening experience based on seed artists, tracks and genres.\n   * See [Get Recommendations Based on Seeds](https://developer.spotify.com/web-api/get-recommendations/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getRecommendations = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/recommendations'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Retrieve a list of available genres seed parameter values for recommendations.\n   * See [Available Genre Seeds](https://developer.spotify.com/web-api/get-recommendations/#available-genre-seeds) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAvailableGenreSeeds = function(callback) {\n    var requestData = {\n      url: _baseUri + '/recommendations/available-genre-seeds'\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get information about a user’s available devices.\n   * See [Get a User’s Available Devices](https://developer.spotify.com/web-api/get-a-users-available-devices/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyDevices = function(callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/devices'\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get information about the user’s current playback state, including track, track progress, and active device.\n   * See [Get Information About The User’s Current Playback](https://developer.spotify.com/web-api/get-information-about-the-users-current-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyCurrentPlaybackState = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get the object currently being played on the user’s Spotify account.\n   * See [Get the User’s Currently Playing Track](https://developer.spotify.com/web-api/get-the-users-currently-playing-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyCurrentPlayingTrack = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/currently-playing'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Transfer playback to a new device and determine if it should start playing.\n   * See [Transfer a User’s Playback](https://developer.spotify.com/web-api/transfer-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} deviceIds A JSON array containing the ID of the device on which playback should be started/transferred.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.transferMyPlayback = function(deviceIds, options, callback) {\n    var postData = options || {};\n    postData.device_ids = deviceIds;\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player',\n      postData: postData\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Start a new context or resume current playback on the user’s active device.\n   * See [Start/Resume a User’s Playback](https://developer.spotify.com/web-api/start-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.play = function(options, callback) {\n    options = options || {};\n    var params = 'device_id' in options ? {device_id: options.device_id} : null;\n    var postData = {};\n    ['context_uri', 'uris', 'offset', 'position_ms'].forEach(function(field) {\n      if (field in options) {\n        postData[field] = options[field];\n      }\n    });\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/play',\n      params: params,\n      postData: postData\n    };\n\n    // need to clear options so it doesn't add all of them to the query params\n    var newOptions = typeof options === 'function' ? options : {};\n    return _checkParamsAndPerformRequest(requestData, newOptions, callback);\n  };\n\n  /**\n   * Pause playback on the user’s account.\n   * See [Pause a User’s Playback](https://developer.spotify.com/web-api/pause-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.pause = function(options, callback) {\n    options = options || {};\n    var params = 'device_id' in options ? {device_id: options.device_id} : null;\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/pause',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Skips to next track in the user’s queue.\n   * See [Skip User’s Playback To Next Track](https://developer.spotify.com/web-api/skip-users-playback-to-next-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.skipToNext = function(options, callback) {\n    options = options || {};\n    var params = 'device_id' in options ? {device_id: options.device_id} : null;\n    var requestData = {\n      type: 'POST',\n      url: _baseUri + '/me/player/next',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Skips to previous track in the user’s queue.\n   * Note that this will ALWAYS skip to the previous track, regardless of the current track’s progress.\n   * Returning to the start of the current track should be performed using `.seek()`\n   * See [Skip User’s Playback To Previous Track](https://developer.spotify.com/web-api/skip-users-playback-to-next-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.skipToPrevious = function(options, callback) {\n    options = options || {};\n    var params = 'device_id' in options ? {device_id: options.device_id} : null;\n    var requestData = {\n      type: 'POST',\n      url: _baseUri + '/me/player/previous',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Seeks to the given position in the user’s currently playing track.\n   * See [Seek To Position In Currently Playing Track](https://developer.spotify.com/web-api/seek-to-position-in-currently-playing-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {number} position_ms The position in milliseconds to seek to. Must be a positive number.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.seek = function(position_ms, options, callback) {\n    options = options || {};\n    var params = {\n      position_ms: position_ms\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/seek',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Set the repeat mode for the user’s playback. Options are repeat-track, repeat-context, and off.\n   * See [Set Repeat Mode On User’s Playback](https://developer.spotify.com/web-api/set-repeat-mode-on-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {String} state A string set to 'track', 'context' or 'off'.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.setRepeat = function(state, options, callback) {\n    options = options || {};\n    var params = {\n      state: state\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/repeat',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Set the volume for the user’s current playback device.\n   * See [Set Volume For User’s Playback](https://developer.spotify.com/web-api/set-volume-for-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {number} volume_percent The volume to set. Must be a value from 0 to 100 inclusive.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.setVolume = function(volume_percent, options, callback) {\n    options = options || {};\n    var params = {\n      volume_percent: volume_percent\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/volume',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Toggle shuffle on or off for user’s playback.\n   * See [Toggle Shuffle For User’s Playback](https://developer.spotify.com/web-api/toggle-shuffle-for-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {bool} state Whether or not to shuffle user's playback.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.setShuffle = function(state, options, callback) {\n    options = options || {};\n    var params = {\n      state: state\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/shuffle',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Gets the access token in use.\n   *\n   * @return {string} accessToken The access token\n   */\n  Constr.prototype.getAccessToken = function() {\n    return _accessToken;\n  };\n\n  /**\n   * Sets the access token to be used.\n   * See [the Authorization Guide](https://developer.spotify.com/web-api/authorization-guide/) on\n   * the Spotify Developer site for more information about obtaining an access token.\n   *\n   * @param {string} accessToken The access token\n   * @return {void}\n   */\n  Constr.prototype.setAccessToken = function(accessToken) {\n    _accessToken = accessToken;\n  };\n\n  /**\n   * Sets an implementation of Promises/A+ to be used. E.g. Q, when.\n   * See [Conformant Implementations](https://github.com/promises-aplus/promises-spec/blob/master/implementations.md)\n   * for a list of some available options\n   *\n   * @param {Object} PromiseImplementation A Promises/A+ valid implementation\n   * @throws {Error} If the implementation being set doesn't conform with Promises/A+\n   * @return {void}\n   */\n  Constr.prototype.setPromiseImplementation = function(PromiseImplementation) {\n    var valid = false;\n    try {\n      var p = new PromiseImplementation(function(resolve) {\n        resolve();\n      });\n      if (typeof p.then === 'function' && typeof p.catch === 'function') {\n        valid = true;\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    if (valid) {\n      _promiseImplementation = PromiseImplementation;\n    } else {\n      throw new Error('Unsupported implementation of Promises/A+');\n    }\n  };\n\n  return Constr;\n})();\n\nif (typeof module === 'object' && typeof module.exports === 'object') {\n  module.exports = SpotifyWebApi;\n}\n","// Types\nimport Vue from 'vue';\nexport default function VGrid(name) {\n  /* @vue/component */\n  return Vue.extend({\n    name: `v-${name}`,\n    functional: true,\n    props: {\n      id: String,\n      tag: {\n        type: String,\n        default: 'div'\n      }\n    },\n\n    render(h, {\n      props,\n      data,\n      children\n    }) {\n      data.staticClass = `${name} ${data.staticClass || ''}`.trim();\n      const {\n        attrs\n      } = data;\n\n      if (attrs) {\n        // reset attrs to extract utility clases like pa-3\n        data.attrs = {};\n        const classes = Object.keys(attrs).filter(key => {\n          // TODO: Remove once resolved\n          // https://github.com/vuejs/vue/issues/7841\n          if (key === 'slot') return false;\n          const value = attrs[key]; // add back data attributes like data-test=\"foo\" but do not\n          // add them as classes\n\n          if (key.startsWith('data-')) {\n            data.attrs[key] = value;\n            return false;\n          }\n\n          return value || typeof value === 'string';\n        });\n        if (classes.length) data.staticClass += ` ${classes.join(' ')}`;\n      }\n\n      if (props.id) {\n        data.domProps = data.domProps || {};\n        data.domProps.id = props.id;\n      }\n\n      return h(props.tag, data, children);\n    }\n\n  });\n}\n//# sourceMappingURL=grid.js.map"],"sourceRoot":""}